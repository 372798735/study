generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  openid          String           @unique
  nickname        String?
  avatar          String?
  role            String           @default("student")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  learningRecords LearningRecord[]
  wrongBooks      WrongBook[]

  @@map("users")
}

model Question {
  id               Int              @id @default(autoincrement())
  title            String
  content          String           @db.Text
  type             String
  questionCategory String           @default("objective") @map("question_category")
  examType         String?          @map("exam_type")
  paperName        String?          @map("paper_name")
  options          Json?
  answer           String?          @db.Text
  explanation      String?          @db.Text
  category         String
  difficulty       String           @default("medium")
  imageUrl         String?          @map("image_url")
  videoUrl         String?          @map("video_url")
  videoDuration    Int?             @map("video_duration")
  createdAt        DateTime         @default(now()) @map("created_at")
  learningRecords  LearningRecord[]
  wrongBooks       WrongBook[]

  @@map("questions")
}

model Video {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?          @db.Text
  fileUrl         String           @map("file_url")
  category        String
  thumbnailUrl    String?          @map("thumbnail_url")
  fileSize        BigInt?          @map("file_size")
  createdAt       DateTime         @default(now()) @map("created_at")
  learningRecords LearningRecord[]

  @@map("videos")
}

model LearningRecord {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  contentId   Int       @map("content_id")
  contentType String    @map("content_type")
  progress    Float     @default(0)
  score       Int?
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  question    Question? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "learning_records_question_id_fkey")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       Video?    @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "learning_records_video_id_fkey")

  @@unique([userId, contentId, contentType])
  @@index([contentId], map: "learning_records_video_id_fkey")
  @@map("learning_records")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model Dictionary {
  id        Int      @id @default(autoincrement())
  type      String
  label     String
  value     String
  sort      Int      @default(0)
  status    String   @default("active")
  remark    String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([type, value])
  @@map("dictionaries")
}

model WrongBook {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  questionId       Int      @map("question_id")
  questionCategory String   @map("question_category")
  userAnswer       String?  @map("user_answer") @db.Text
  note             String?  @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
  @@index([questionCategory])
  @@map("wrong_books")
}

model VideoNote {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  fileUrl     String   @map("file_url")
  fileType    String   @map("file_type") // 'word' or 'pdf'
  fileName    String   @map("file_name")
  fileSize    BigInt?  @map("file_size")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("video_notes")
}
